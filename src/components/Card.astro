---
import '../styles/global.css';

interface Props {
  cards: {
    text: string;
    author: string;
    image: string;
  }[];
}

const { cards } = Astro.props;


---

<div class="bottom-0 left-0 right-0 flex justify-center w-full h-[350px] px-[50px]" id="cardContainer">
  {cards.map((card, index) => {
    const hue = (index / cards.length) * -360;
    const midPoint = (cards.length - 1) / 2;
    const rotationRange = 50;
    const rotation = ((index - midPoint) / (cards.length - 2)) * rotationRange;
    const offsetRange = 180;
    const offset = Math.abs(((index - midPoint) / (cards.length - 2)) * offsetRange);

    return (
      <div 
        class="card cursor-pointer" 
        data-card-id={index}
        style={`
          --card-hue: ${hue};
           // --card-offset: ${offset}px;
          // --card-rotation: ${rotation}deg;
        `}
        data-astro-click="toggleCard"
      >
        <div class="card-face">
          <img src={card.image} alt={card.author} class="object-cover w-full h-64" />
          <div class="card-content">
            <div class="text-xs text-white font-bold mb-2">{card.text}</div>
            <div class="text-sm author">- {card.author}</div>
          </div>
        </div>
      </div>
    );
  })}
</div>

<style>
  .card-container {
    display: flex;
    justify-content: center;
    width: 100%;
    height: 350px;
    padding: 0 50px;
  }

  .card {
    transition: transform 0.5s ease-in-out;
  }

  .card.active {
    z-index: 10;
  }

  @media (max-width: 768px) {
    .card-container {
      flex-direction: column;
      height: auto;
      padding: 0;
    }

    .card {
      margin-bottom: 20px;
    }
  }
</style>

<script>
  if (typeof window !== 'undefined') {
    class CardStack {
      activeCard: HTMLElement | null = null;

      toggleCard(event: Event) {
        const clickedCard = event.currentTarget as HTMLElement;

        if (this.activeCard === clickedCard) {
          clickedCard.classList.remove('active');
          clickedCard.style.transform = '';
          this.activeCard = null;
          return;
        }

        if (this.activeCard) {
          this.activeCard.classList.remove('active');
          this.activeCard.style.transform = '';
        }

        clickedCard.classList.add('active');
        const cardRect = clickedCard.getBoundingClientRect();
        const containerRect = document.getElementById('cardContainer')!.getBoundingClientRect();
        const translateX = containerRect.width / 2 - cardRect.left - cardRect.width / 2;
        const translateY = containerRect.height / 2;
        clickedCard.style.transform = `translate(${translateX}px, ${translateY}px) scale(1.5)`;
        this.activeCard = clickedCard;
      }
    }

    const cardStack = new CardStack();

    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('[data-astro-click="toggleCard"]').forEach(card => {
        card.addEventListener('click', (e) => cardStack.toggleCard(e));
      });
    });
  }
</script>