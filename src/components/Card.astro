---
// StackedCards.astro
interface Props {
  cards: {
    text: string;
    author: string;
    image: string;
  }[];
}

const { cards } = Astro.props;
---

<div class=" bottom-0 left-0 right-0 flex justify-center w-full h-[350px] px-[50px]" id="cardContainer">
  {cards.map((card, index) => {
    const hue = (index / cards.length) * -360;
    const midPoint = (cards.length - 1) / 2;
    const rotationRange = 50;
    const rotation = ((index - midPoint) / (cards.length - 2)) * rotationRange;
    const offsetRange = 80;
    const offset = Math.abs(((index - midPoint) / (cards.length - 2)) * offsetRange);

    return (
      <div 
        class="card cursor-pointer" 
        data-card-id={index}
        style={`
          --card-hue: ${hue};
          --card-offset: ${offset}px;
          --card-rotation: ${rotation}deg;
        `}
        data-astro-click="toggleCard"
      >
        <div class="card-face">
          <img src={card.image} alt={card.author} class="object-cover w-full h-64" />
          <div class="card-content">
            <div class="text-sm text text-whitefont-bold mb-2">{card.text}</div>
            <div class="text-sm author">- {card.author}</div>
          </div>
        </div>
      </div>
    );
  })}
</div>

<style>
  .card {
    @apply relative h-[250px] w-[180px] -mx-6;
    transition: z-index 0ms step-end;
  }

  .card-face {
    @apply absolute bottom-0 left-0 right-0 top-0 overflow-hidden rounded-lg;
    background: linear-gradient(-135deg, 
      hsl(var(--card-hue), 100%, 80%),
      hsl(var(--card-hue), 90%, 45%)
    );
    box-shadow: -5px 5px 5px rgba(0, 0, 0, 0.15),
                inset 0 0 0 2px hsla(var(--card-hue), 100%, 80%, 0.75);
    transform: translateY(var(--card-offset)) rotate(var(--card-rotation));
    transition: transform 800ms cubic-bezier(0.19, 1, 0.22, 1);
    border-radius: 0px;
  }

  .card-content {
    @apply p-4 text-white opacity-0;
    transition: opacity 300ms ease-in-out;
  }

  .card.active .card-content {
  opacity: 1; /* Show content when active */
  position: absolute;
  top: 10%;
  padding: 20px;
}

 .card.active img {
    opacity: 0.8;
  }
  .card.active {
    z-index: 50;
    transition: z-index 0ms step-start;
  }

  .card.active .card-face {
    transform: translateY(-100px) rotate(0deg) scale(2);
    width: 300px;
    @media (max-width: 640px) {
      max-width: 50vw; /* Adjust max width for mobile */
    margin: 0 auto;
    }
  }
@media (max-width: 640px) {
.card.active .card-content {
background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background for mobile */
}
  .text {
    font-size: .51rem; /* Smaller font size for mobile */
  }

  .author {
    font-size: 0.875rem; /* Adjust text size for smaller text */
  }
}
  .card.active .card-content {
    opacity: 1;
  }

  .card-face::after {
    content: '';
    @apply absolute inset-0 bg-white opacity-0;
  }

  .card.active .card-face::after {
    animation: flashFade 250ms ease-out forwards;
  }

  @keyframes flashFade {
    0% {
      opacity: 0.9;
      transform: scale(1);
    }
    100% {
      opacity: 0;
      transform: scale(1.15);
    }
  }
</style>

<script>
  class CardStack {
    constructor() {
      this.activeCard = null;
    }

    toggleCard(event) {
      const clickedCard = event.currentTarget;
      const cardId = clickedCard.dataset.cardId;
      
      // console.log('Card clicked:', cardId);

      // If clicking the active card, deactivate it
      if (this.activeCard === clickedCard) {
        clickedCard.classList.remove('active');
        this.activeCard = null;
        return;
      }

      // Deactivate previous card if exists
      if (this.activeCard) {
        this.activeCard.classList.remove('active');
      }

      // Activate new card
      clickedCard.classList.add('active');
      this.activeCard = clickedCard;
    }
  }

  // Initialize on page load
  const cardStack = new CardStack();

  document.addEventListener('astro:page-load', () => {
    document.querySelectorAll('[data-astro-click="toggleCard"]').forEach(card => {
      card.addEventListener('click', (e) => cardStack.toggleCard(e));
    });
  });
</script>