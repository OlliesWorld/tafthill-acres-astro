---
interface CardData {
    text: string;
    author: string;
    image: string;
}

const { cardsData } = Astro.props;

// Log the cardsData to see if the data is coming through correctly
// console.log('cardsData:', cardsData);
---

<div class="container">
    <div class="slide">
        {
            cardsData.map((card: CardData, index: number) => {
                // Log each card's name and quote to verify the data
                // console.log('Card:', card);
                return (
                    <div
                        class="item"
                        style={`background-image: url(${card.image});`}
                    >
                        <div class="content bg-black lg:p-4">
                            <div class="des">{card.text}</div>
                            <div class="name ">~ {card.author}</div>
                        </div>
                    </div>
                );
            })
        }
    </div>

    <div class="button">
        <button class="prev">
            <div class="arrow">
                <div class="arrow-top"></div>
                <div class="arrow-bottom"></div>
            </div>
        </button>
        <button class="next">
            <div class="arrow">
                <div class="arrow-top"></div>
                <div class="arrow-bottom"></div>
            </div>
        </button>
    </div>
</div>

<style>
    .container {
        margin: 0 auto;
        width: 100%;
        max-width: 1000px;
        height: 600px;
        background: #f5f5f5;
        box-shadow: 0 30px 50px #dbdbdb;
        position: relative;
        top: 0;
        left: 0;
        transform: none;
    }


   
    .container .slide .item {
        width: 200px;
        height: 300px;
        position: absolute;
        top: 50%;
        transform: translate(0, -50%);
        /* border-radius: 20px; */
        box-shadow: 0 30px 50px #505050;
        background-position: 50% 50%;
        background-size: cover;
        display: inline-block;
        transition: 0.5s;
    }

    .container .slide .item.active {
        width: 100%;
        height: 100%;
    }

    .slide .item:nth-child(1),
    .slide .item:nth-child(2) {
        top: 0;
        left: 0;
        transform: translate(0, 0);
        border-radius: 0;
        width: 100%;
        height: 100%;
    }

    .slide .item:nth-child(3) {
        left: 50%;
        width: 100%;
        height: 100%;
    }

    .slide .item:nth-child(4) {
        left: calc(50% + 220px);
    }

    .slide .item:nth-child(5) {
        left: calc(50% + 440px);
    }

    .slide .item:nth-child(n + 6) {
        left: calc(50% + 660px);
        opacity: 0;
    }

    .item .content {
        position: absolute;
        top: 10%;
        left: 50px;
        width: 80%;
        max-width: 300px;
        text-align: left;
        color: #eee;
        transform: translate(0, -50%);
        font-family: system-ui;
        display: none;
        background-color: rgba(0, 0, 0, 0.5);
        padding: 10px;
    }
   
    .slide .item.active .content {
        display: block;
    }
   
   

   
    .content .name {
        font-size: 40px;
        text-transform: uppercase;
        font-weight: bold;
        opacity: 0;
        animation: animate 1s ease-in-out 1 forwards;
    }

    .content .des {
        margin-top: 10px;
        margin-bottom: 20px;
        opacity: 0;
        animation: animate 1s ease-in-out 0.3s 1 forwards;
    }

    .content button {
        padding: 10px 20px;
        border: none;
        cursor: pointer;
        opacity: 0;
        animation: animate 1s ease-in-out 0.6s 1 forwards;
    }

    @keyframes animate {
        from {
            opacity: 0;
            transform: translate(0, 100px);
            filter: blur(33px);
        }

        to {
            opacity: 1;
            transform: translate(0);
            filter: blur(0);
        }
    }

    .button {
        width: 100%;
        text-align: center;
        position: absolute;
        bottom: 20px;
    }

    .button button {
        width: 50px;
        height: 50px;
        border: none;
        cursor: pointer;
        transition: 0.3s;
    }
    .arrow {
        cursor: pointer;
        height: 20px;
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        transition: transform 0.1s;
        width: 20px;
    }

    .prev .arrow {
        top: 23px;
        transform: rotate(180deg);
    }

    .next .arrow {
        /* right: 10px; */
    }

    .arrow-top,
    .arrow-bottom {
        background-color: #fff;
        height: 4px;
        position: absolute;
        top: 50%;
        width: 100%;
    }

    .arrow-top:after,
    .arrow-bottom:after {
        background-color: #1b2911;
        content: "";
        height: 100%;
        position: absolute;
        top: 0;
        transition: all 0.15s;
        box-shadow:;
    }
    .arrow-top {
        transform: rotate(45deg);
        transform-origin: bottom right;
    }

    .arrow-top:after {
        left: 100%;
        right: 0;
        transition-delay: 0s;
    }

    .arrow-bottom {
        transform: rotate(-45deg);
        transform-origin: top right;
    }

    .arrow-bottom:after {
        left: 0;
        right: 100%;
        transition-delay: 0.15s;
    }

    .arrow:hover .arrow-top:after {
        left: 0;
        transition-delay: 0.15s;
        box-shadow: 0 4px 8px rgba(242, 235, 235, 0.75); /* Add box shadow on hover */
    }

    .arrow:hover .arrow-bottom:after {
        right: 0;
        transition-delay: 0s;
        box-shadow: 0 4px 8px rgba(242, 235, 235, 0.75);
    }

    .arrow:active {
        /* transform: translateY(-50%) scale(0.9); */
    }
    @media (max-width: 480px) {
        .container {
            height: 300px;
        }
        .button {
            background-color: rgba(145,96,51,1);
        }
    }
    @media (max-width: 768px) {
        .container {
            height: 400px;
        }

        /* Similar mobile treatment but for tablets */
        .container .slide .item {
            /* display: none; Hide all items by default */
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            transform: none;
        }

        .container .slide .item.active {
            display: block;
            position: relative;
            opacity: 1;
            pointer-events: auto;
        }

        /* Hide all non-active slides properly */
        .slide .item:not(.active) {
            display: none;
        }

        /* Position content for tablet */
        .item .content {
            left: 20px;
            width: 90%;
            max-width: 350px;
            position: absolute;
            top: 170px;
            /* bottom: 80px; */
            z-index: 10;
            height: fit-content;
        }

        /* Ensure buttons are positioned correctly */
        .button {
            position: absolute;
            bottom: 10px;
            width: 100%;
            text-align: center;
            z-index: 10;
        }

        .content .name {
            font-size: 24px;
        }

        .content .des {
            font-size: 14px;
        }
    }
</style>
<script>
    function initializeSlider() {
        // console.log("initializeSlider function called");

        const next = document.querySelector(".next");
        const prev = document.querySelector(".prev");
        const items = document.querySelectorAll(".item");

        // console.log("Next button:", next);
        // console.log("Prev button:", prev);

        if (next && prev) {
            next.addEventListener("click", function () {
                console.log("Next button clicked");
                const items = document.querySelectorAll(".item");
                const slide = document.querySelector(".slide");
                if (slide) {
                    slide.appendChild(items[0]);
                    updateActiveSlide();
                }
            });

            prev.addEventListener("click", function () {
                console.log("Prev button clicked");
                const items = document.querySelectorAll(".item");
                const slide = document.querySelector(".slide");
                if (slide) {
                    slide.prepend(items[items.length - 1]);
                    updateActiveSlide();
                }
            });
        }

        // Initialize the active slide on load
        updateActiveSlide();
    }

    function updateActiveSlide() {
        const items = document.querySelectorAll(".item");
        items.forEach((item, index) => {
            if (index === 1) {
                item.classList.add("active");
            } else {
                item.classList.remove("active");
            }
        });
    }

    // Run on both initial load and subsequent navigations
    document.addEventListener("astro:page-load", initializeSlider);
</script>
