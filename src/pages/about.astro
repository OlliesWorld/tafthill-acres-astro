---
import { PortableText } from "astro-portabletext";
import type { PortableTextBlock } from "@portabletext/types";
import type { ImageAsset } from "@sanity/types";
import Layout from "../layouts/Layout.astro";
import { urlFor } from "../utils/image";
import { loadQuery } from "../../sanity/lib/load-query";
import { decodeHtmlEntities, cleanText } from "../utils/textUtils";

interface About {
  _type: "about";
  title?: string;
  subtitle?: string;
  body?: PortableTextBlock[];
  mainImage?: ImageAsset;
  gallery: ImageAsset[];
  title2?: string;
  subtitle2?: string;
  body2?: PortableTextBlock[];
}

const result = await loadQuery<{
  title?: string;
  subtitle?: string;
  body?: string;
  mainImage?: ImageAsset;
  gallery?: string;
  title2?: string;
  subtitle2?: string;
  body2?: string;
}>({
  query: `*[_type == 'about'] | order(_createdAt desc) {
    title,
    subtitle,
    body,
    mainImage,
    gallery,
    title2,
    subtitle2,
    body2
  }[0]`,
});

// console.log('result.data', result.data);
const about =
  result && result.data
    ? {
        title:
          typeof result.data.title === "string"
            ? cleanText(decodeHtmlEntities(result.data.title))
            : "",
        subtitle:
          typeof result.data.subtitle === "string"
            ? cleanText(decodeHtmlEntities(result.data.subtitle))
            : "",
        body: Array.isArray(result.data.body) ? result.data.body : [],
        title2:
          typeof result.data.title2 === "string"
            ? cleanText(decodeHtmlEntities(result.data.title2))
            : "",
        subtitle2:
          typeof result.data.subtitle2 === "string"
            ? cleanText(decodeHtmlEntities(result.data.subtitle2))
            : "",
        body2: Array.isArray(result.data.body2) ? result.data.body2 : [],
        mainImage: result.data.mainImage || null,
        gallery: Array.isArray(result.data.gallery) ? result.data.gallery : [], // Ensure mainImage is included
      }
    : {
        title: "",
        subtitle: "",
        body: [],
        title2: "",
        subtitle2: "",
        body2: [],
        mainImage: null,
        gallery: [],
      };
// console.log('about', about);
---

<Layout title="Taft Hill Acres | About">
  <div class="container mx-auto mt-8">
    <div class="m-auto text-center">
      <h1
        class="text-darktan text-5xl text-center my-8 font-extrabold uppercase"
      >
        About Taft Hill Acres
      </h1>
      {
        about?.mainImage && (
          <img
            class="z-10 object-cover w-full lg:w-3/4 m-auto"
            src={urlFor(about.mainImage).url()}
            alt="About Taft Hill Acres"
          />
        )
      }
    </div>
    <div class="lg:w-3/4 bg-darktan mx-auto p-4 lg:p-12">
      <h2 class="text-left text-black font-extrabold text-4xl">
        {about.subtitle}
      </h2>
      {
        about.title && (
          <h2 class="text-green text-5xl text-center mb-4">{about.title}</h2>
        )
      }
      <div class="text-white text-left text-2xl">
        <PortableText value={about.body} />
      </div>
    </div>
    <div class="lg:w-3/4 bg-darktan mx-auto my-8 p-4 lg:p-12">
      <h2 class="text-left text-black font-extrabold text-4xl">
        {about.subtitle2}
      </h2>
      {
        about.title2 && (
          <h2 class="text-green text-5xl text-center mb-4">{about.title2}</h2>
        )
      }
      <div class="text-white text-left text-2xl">
        <PortableText value={about.body2} />
      </div>
    </div>
    <div class="hex-grid">
      {
        about.gallery.map((item) => (
          <div class="hex">
            <div class="hex-inner">
              <img
                src={urlFor(item).url()}
                alt={item.alt || ""}
                loading="lazy"
              />
            </div>
          </div>
        ))
      }
    </div>
  </div>
</Layout>
<style>
  /* Hexagonal grid container */
  .hex-grid {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    margin: 80px auto;
    max-width: 1200px;
  }

  /* Individual hexagon */
  .hex {
    position: relative;
    height: 300px; /* Fixed width of the hexagon */
    width: calc(300px * 1.1547); /* Maintain hexagon aspect ratio */
    margin: -35px 5px; /* Adjust spacing to make hexagons touch */
   
    -webkit-clip-path: polygon(
			50% 0, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%
		);
 	
		clip-path: polygon(
			50% 0, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%
		); /* Hexagon shape */
    overflow: hidden;
    background-color: #f5f5f5; /* Fallback background color */
  }

  /* Image inside the hexagon */
  .hex img {
    aspect-ratio: 1;
    --o: calc(50% * tan(-22.5deg));
    -webkit-clip-path: polygon(
			50% 0, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%
		);
 	
		clip-path: polygon(
			50% 0, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%
		);
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center; 
    transition: transform 0.3s ease-in-out;
    background-position: center center;

    margin-bottom: 20px;
  }

  /* Hover effect for hexagon */
  .hex:hover img {
    transform: scale(1.1); /* Slight zoom on hover */
  }


  .hex:nth-child(1) {
    margin-left: 270px;
    margin-right: 250px;
  }
   .hex:nth-child(2){
    margin-left: 100px;
   }
   .hex:nth-child(3) {
    margin-right: 100px;
   }
   .hex:nth-child(7) {
    margin-left: 100px;
  }

  .hex:nth-child(8) {
    margin-right: 100px;
   }
  
</style>
